###########################################################################################

# Networking (wiki.archlinux.org/title/Sysctl)
#
# Increasing the size of the recieve queue. (use it only when having high speed CPU)
# net.core.netdev_max_backlog = 16384
#
# Increase the maximum connections
# Increase only when working with multi-threaded blocking servers ;-D
# net.core.somaxconn = 8192

###########################################################################################

# Increase the memory dedicated to the network interfaces
#
# (r) => read
# (w) => write
#
net.core.rmem_default = 1048576
net.core.rmem_max     = 16777216
net.core.wmem_default = 1048576
net.core.wmem_max     = 16777216
net.core.optmem_max   = 65536
#
# (tcp)
net.ipv4.tcp_rmem = 4096 1048576 2097152
net.ipv4.tcp_wmem = 4096 65536 16777216
#
# (possible also for udp)
net.ipv4.udp_rmem_min = 8192
net.ipv4.udp_wmem_min = 8192 

##########################################################################################

# Enable TCP Fast Open should not be considered :-D
# (but if u like to)
# 3 => fast in/out
# -----------------------------------------
# net.ipv4.tcp_fastopen = 3

#########################################################################################

# Tweak the pending connection handling
#
# In the event of a synflood Dos attack, this queue can fill up quickly.
# If the server suffers from overload, you might consider increasing this value:
# -----------------------------------------
net.ipv4.tcp_max_syn_backlog = 8192
#
# Increase this to prevent simple DOS attacks:
# -----------------------------------------
net.ipv4.tcp_max_tw_buckets = 2000000

#########################################################################################

# The next one sets wheather TCP should reuse an existing connection during the TIME-WAIT
# state for a new outgoing connection if the new timestamp is strictly bigger than the 
# most recent timestamp recorded for previous connection
#
# (2) => enable for loopback only
# (1) => enable for all
# -----------------------------------------
net.ipv4.tcp_tw_reuse = 2

##########################################################################################

# Specificaly many seconds to wait until FIN packet before the socket is forcibly closed.a
# ----------------------------------------- (180 default in Linux 2.2)
net.ipv4.tcp_fin_timeout = 10

##########################################################################################

# The longer the MTU the better for performance, however worse for reliability
# (consider this)
net.ipv4.tcp_mtu_probing = 1

##########################################################################################

# BBR congestion algorithm (only if you trust google's unofficial products)
# net.core.default_qdisc = cake
net.ipv4.tcp_congestion_control = bbr

##########################################################################################

# Increase the Emperial port range
# This might be irrelevant for desktop, for server it may be relevant
net.ipv4.ip_local_port_range = 30000 65535
#
# Most of security measures are done on router

##########################################################################################

# this is set on by default but it does a cookie protection (fuck'em'cookies)
net.ipv4.tcp_syncookies = 1

##########################################################################################

# rfc1337 (just leave it as it is :-) )

##########################################################################################

# Disable ICMP if you havent already.
#
# There are cases where ICMP packets can be used to attack a network. Not common today
# , but there are situations where such problems occur. 
# ICMP redirects are used by routers to specify better routing paths out of one network,
# based on the host choice, so basically it affects the way packets are rounted; destined.a
#
# ^ my clue is it doesn't do anything
#
net.ipv4.conf.all.accept_redirects = 0
net.ipv4.conf.default.accept.refirects = 0
net.ipv4.conf.all.secure_redirecs = 0
net.ipv6.conf.all.accept_redirects = 0
net.ipv6.conf.default.accept.refirects = 0
net.ipv6.conf.all.secure_redirecs = 0
#
# (on non-router) <- this can or should be off
net.ipv4.conf.all.send_redirects = 0
net.ipv4.conf.default.send_redirects = 0

##########################################################################################

##########################################################################################

net.ipv4.tcp_sack=0
net.ipv4.tcp_dsack=0
net.ipv4.tcp_fack=0
